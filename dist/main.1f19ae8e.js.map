{"version":3,"sources":["../vdom/createElement.js","../vdom/render.js","../vdom/mount.js","../vdom/diff.js","main.js"],"names":["tagName","attrs","children","renderElem","$el","document","createElement","Object","entries","k","v","setAttribute","child","$child","render","appendChild","vNode","createTextNode","$node","$target","replaceWith","zip","xs","ys","zipped","i","Math","min","length","push","diffAttrs","oldAttr","newAttrs","patches","removeAttribute","path","diffChildren","oldVChildren","newVChildren","childPatches","oldVChild","newVChild","diff","additionalPatches","slice","additionalVPath","$parent","childNodes","patch","vOldNode","vNewNode","undefined","remove","$newNode","pathAttrs","pathChildren","createVApp","count","id","dataCount","String","src","vApp","$app","console","log","$rootEl","getElementById","setInterval","vNewApp"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["export default(tagName, { attrs = {}, children = [] } = {}) => {\n    return {\n        tagName,\n        attrs,\n        children\n    }\n}","const renderElem = ({tagName, attrs, children}) => {\n  const $el = document.createElement(tagName);\n\n  // Set attributes\n  for (const [k, v] of Object.entries(attrs)) {\n      $el.setAttribute(k, v)\n  }\n\n  // Set children\n    for(const child of children) {\n        const $child = render(child);\n        $el.appendChild($child)\n    }\n\n    return $el;\n};\n\nconst render = (vNode) => {\n    if (typeof vNode === 'string') {\n        return document.createTextNode(vNode)\n    }\n\n    return renderElem(vNode)\n}\n\nexport default render;","export default ($node, $target) => {\n    $target.replaceWith($node)\n    return $node;\n}","import render from \"./render\";\nconst zip = (xs, ys) => {\n    const zipped = []\n    for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\n        zipped.push([xs[i], ys[i]]);\n    }\n    return zipped\n}\n\nconst diffAttrs = (oldAttr, newAttrs) => {\n    const patches = []\n\n    // add new attributes\n    for(const [k, v] of Object.entries(newAttrs)) {\n        patches.push($node => {\n            $node.setAttribute(k, v);\n            return $node\n        })\n    }\n\n    // remove old attributes\n    for(const k of Object.entries(oldAttr)) {\n        if(!(k in newAttrs)) {\n            patches.push($node => {\n                $node.removeAttribute(k);\n                return $node;\n            })\n        }\n    }\n\n    return $node => {\n        for (const path of patches) {\n            path($node)\n        }\n    }\n}\n\nconst diffChildren = (oldVChildren, newVChildren) => {\n    const childPatches = []\n    for (const [oldVChild, newVChild] of zip(oldVChildren, newVChildren)) {\n        childPatches.push(diff(oldVChild, newVChild))\n    }\n\n    const additionalPatches = [];\n    for (const additionalVPath of newVChildren.slice(oldVChildren.length)) {\n        additionalPatches.push($node => {\n            $node.appendChild(render(additionalVPath))\n            return $node;\n        })\n    }\n\n    return $parent => {\n        for (const [path, child] of zip(childPatches, $parent.childNodes)) {\n            path(child)\n        }\n        for (const patch of additionalPatches) {\n            patch($parent)\n        }\n        return $parent;\n    }\n}\n\n\nconst diff = (vOldNode, vNewNode) => {\n    if(vNewNode === undefined) {\n        return  $node =>  {\n            $node.remove()\n            return undefined;\n        }\n    }\n\n    if(typeof vOldNode === 'string' || typeof vNewNode === 'string') {\n        if(vOldNode !== vNewNode) {\n            return $node => {\n                const $newNode = render(vNewNode)\n                $node.replaceWith($newNode)\n                return $newNode\n            }\n        } else {\n            return $node => undefined\n        }\n    }\n\n    if(vOldNode.tagName !== vNewNode.tagName) {\n        return  $node =>  {\n            const $newNode = render(vNewNode)\n            $node.replaceWith($newNode)\n            return $newNode\n        }\n    }\n\n    const pathAttrs = diffAttrs(vOldNode.attrs, vNewNode.attrs)\n    const pathChildren = diffChildren(vOldNode.children, vNewNode.children)\n\n    return $node => {\n        pathAttrs($node)\n        pathChildren($node)\n\n        return $node\n    }\n}\n\nexport default diff;","import createElement from \"../vdom/createElement\";\nimport render from \"../vdom/render\";\nimport mount from \"../vdom/mount\";\nimport diff from '../vdom/diff'\nconst createVApp = (count) => createElement('div', {\n    attrs: {\n        id: 'app',\n        dataCount: count\n    },\n    children: [\n        createElement('input'),\n        String(count),\n        createElement('img', {\n            attrs: {\n                src: 'https://media.giphy.com/media/dpSrm4cwUmCeQ/giphy.gif'\n            }\n        })\n    ]\n});\n\nlet count = 0;\nlet vApp = createVApp(count)\nconst $app =  render(vApp)\n\nconsole.log($app)\n\nlet $rootEl = mount($app, document.getElementById('app'))\n\nsetInterval(() => {\n    count++\n    const vNewApp = createVApp(count)\n    const patch = diff(vApp, vNewApp)\n    $rootEl = patch($rootEl)\n    vApp = vNewApp\n}, 1000)\n\nconsole.log($app)"]}